@startuml agent-architecture
!theme plain
skinparam linetype ortho

title Agent階層とエスカレーション - 組織設計原則に基づく自律実行システム

' 人間レイヤー
package "Human Layer (戦略・承認)" {
  actor "TechLead" as techlead #LightBlue
  actor "PO" as po #LightGreen
  actor "CISO" as ciso #LightCoral
  actor "CTO" as cto #LightYellow
}

' BaseAgent抽象クラス
abstract class BaseAgent {
  - agentType: string
  - config: AgentConfig
  - startTime: number
  + log(message: string): void
  + {abstract} execute(task: Task): Promise<AgentResult>
  + escalate(message, target, severity, data): Promise<void>
}

' Coordinator Layer
package "Coordinator Layer (統括)" {
  class CoordinatorAgent <<統括権限>> {
    + execute(task: Task): AgentResult
    __
    責任範囲:
    - Issue → Task分解
    - DAG構築・トポロジカルソート
    - Agent割り当て
    - 並行実行制御 (最大5並行)
    __
    エスカレーション:
    - TechLead (循環依存検出)
    - PO (要件不明確)
  }
}

' Specialist Layer
package "Specialist Layer (専門実行)" {

  class CodeGenAgent <<実行権限>> {
    + execute(task: Task): AgentResult
    __
    責任範囲:
    - TypeScriptコード生成
    - ユニットテスト生成
    - BaseAgentパターン実装
    __
    エスカレーション:
    - TechLead (アーキテクチャ問題)
  }

  class ReviewAgent <<判定権限>> {
    + execute(task: Task): AgentResult
    + calculateQualityScore(): number
    __
    責任範囲:
    - 静的解析 (ESLint/TypeScript)
    - セキュリティスキャン
    - 品質スコア算出 (0-100点)
    - 合格ライン: 80点以上
    __
    エスカレーション:
    - CISO (Critical脆弱性)
    - TechLead (品質スコア50点未満)
  }

  class IssueAgent <<分析権限>> {
    + execute(task: Task): AgentResult
    + classifyIssue(): IssueClassification
    __
    責任範囲:
    - Issue種別判定
    - 53ラベル自動付与
    - Severity評価 (Sev.1-5)
    - 担当者自動アサイン
    __
    エスカレーション:
    - TechLead (技術判断)
    - PO (ビジネス判断)
    - CISO (セキュリティ)
  }

  class PRAgent <<作成権限>> {
    + execute(task: Task): AgentResult
    + generatePRTitle(): string
    __
    責任範囲:
    - Draft PR自動作成
    - Conventional Commits準拠
    - レビュワー自動割り当て
    - 関連Issue紐付け
    __
    エスカレーション:
    - TechLead (権限エラー)
  }

  class DeploymentAgent <<実行権限>> {
    + execute(task: Task): AgentResult
    + healthCheck(): boolean
    + rollback(): void
    __
    責任範囲:
    - Firebase/Vercelデプロイ
    - ヘルスチェック (5-10回リトライ)
    - 自動Rollback
    __
    エスカレーション:
    - CTO (本番デプロイ失敗)
    - TechLead (ビルド失敗)
  }
}

' 継承関係
BaseAgent <|-- CoordinatorAgent
BaseAgent <|-- CodeGenAgent
BaseAgent <|-- ReviewAgent
BaseAgent <|-- IssueAgent
BaseAgent <|-- PRAgent
BaseAgent <|-- DeploymentAgent

' 実行関係 (Coordinator → Specialists)
CoordinatorAgent --> CodeGenAgent : assigns
CoordinatorAgent --> ReviewAgent : assigns
CoordinatorAgent --> IssueAgent : assigns
CoordinatorAgent --> PRAgent : assigns
CoordinatorAgent --> DeploymentAgent : assigns

' Agent間の連携
CodeGenAgent --> ReviewAgent : triggers after\ncode generation
ReviewAgent --> PRAgent : triggers after\nquality check (>=80点)
PRAgent --> DeploymentAgent : triggers after\nPR merge

' エスカレーション関係
CoordinatorAgent ..> techlead : 循環依存\n検出時
CoordinatorAgent ..> po : 要件不明確時

CodeGenAgent ..> techlead : アーキテクチャ\n問題時

ReviewAgent ..> ciso : Critical脆弱性\n検出時
ReviewAgent ..> techlead : 品質スコア\n50点未満

IssueAgent ..> techlead : 技術判断\n必要時
IssueAgent ..> po : ビジネス判断\n必要時
IssueAgent ..> ciso : セキュリティ\n関連時

PRAgent ..> techlead : 権限エラー時

DeploymentAgent ..> cto : 本番デプロイ\n失敗時
DeploymentAgent ..> techlead : ビルド失敗時

note right of CoordinatorAgent
  並行実行制御
  - DAG構築 (Kahn's Algorithm)
  - トポロジカルソート
  - 並行度算出 (最大5)
  - 循環依存検出 (DFS)
end note

note right of ReviewAgent
  品質スコアリング
  base_score: 100点
  - ESLintエラー: -20点/件
  - TypeScriptエラー: -30点/件
  - Critical脆弱性: -40点/件
  - High脆弱性: -20点/件
  合格ライン: 80点以上
end note

note bottom of DeploymentAgent
  Production承認フロー
  1. Staging自動デプロイ
  2. CTOへ承認リクエスト
  3. 承認後にProductionデプロイ
  4. ヘルスチェック (10回)
  5. 失敗時は自動Rollback
end note

legend right
  |= 権限レベル |= 説明 |
  | 統括権限 | タスク分解・Agent割り当て・リソース配分を決定可能 |
  | 実行権限 | コード生成・PR作成・デプロイ実行を直接実行可能 |
  | 判定権限 | 品質合否判定を実行可能 (合格基準に基づく) |
  | 分析権限 | Issue分析・Label付与を実行可能 |

  組織設計原則5原則
  1. 責任の明確化 - 各Agentの役割を明確に定義
  2. 権限の明確化 - Agent毎の実行権限を制限
  3. 階層の明確化 - Coordinator → Specialist の階層構造
  4. 結果の明確化 - 成功条件・KPIを数値化
  5. 曖昧性の排除 - YAML/JSON形式で構造化
endlegend

@enduml
