@startuml agent-execution-flow
!theme plain

title Agent実行フロー - Issue作成からPR作成まで

actor "Developer" as dev
participant "GitHub Issue" as issue
participant "CoordinatorAgent" as coordinator
participant "IssueAgent" as issue_agent
participant "CodeGenAgent" as codegen
participant "ReviewAgent" as review
participant "PRAgent" as pr
database "GitHub" as github
actor "TechLead" as techlead

== Phase 1: Issue作成・分析 ==

dev -> issue: Issue作成
note right
  **Issue内容**
  - タイトル
  - 本文（要件記述）
  - チェックボックスリスト
end note

dev -> coordinator: npm run agents:parallel:exec\n--issue 270 --concurrency 2
activate coordinator

coordinator -> issue: Issueをfetch
issue --> coordinator: Issue情報を返す

coordinator -> issue_agent: execute(Issue #270)
activate issue_agent

issue_agent -> issue_agent: AI推論でIssue分析
note right
  - Issue種別判定 (feature/bug)
  - Severity評価 (Sev.1-5)
  - 影響度評価 (Critical/High/Medium/Low)
  - 53ラベル体系から適切なLabel選択
end note

issue_agent -> github: Label付与 + 担当者アサイン
github --> issue_agent: 完了通知

issue_agent -> github: 分析コメント投稿
github --> issue: コメント追加

issue_agent --> coordinator: AgentResult\n(status: success)
deactivate issue_agent

== Phase 2: タスク分解・DAG構築 ==

coordinator -> coordinator: Issue → Task分解
note right
  **分解アルゴリズム**
  - チェックボックス検出: - [ ] ...
  - 番号リスト検出: 1. ...
  - 見出し検出: ## ...
  - 依存関係抽出: (depends: #270)
end note

coordinator -> coordinator: DAG構築
note right
  **グラフ構築**
  1. nodes: Task[]
  2. edges: Edge[]
  3. 循環依存チェック (DFS)
  4. トポロジカルソート (Kahn's Algorithm)
end note

alt 循環依存検出
  coordinator -> techlead: エスカレーション\n(Sev.2-High: 循環依存検出)
  note right
    Issue設計に問題があります。
    依存関係を修正してください。
  end note
  techlead --> coordinator: Issue修正完了
end

coordinator -> coordinator: 実行計画作成
note right
  **ExecutionPlan**
  - sessionId
  - totalTasks: 3
  - concurrency: 2
  - estimatedDuration: 120分
  - DAG levels: 2
end note

== Phase 3: コード生成 (並行実行) ==

coordinator -> codegen: execute(Task-270-1)
activate codegen

codegen -> codegen: 要件分析
codegen -> codegen: TypeScriptコード生成\n(Claude Sonnet 4)
note right
  **生成内容**
  - agents/new-agent.ts
  - agents/types/new-types.ts
  - tests/new-agent.spec.ts
  - JSDocコメント
end note

codegen -> codegen: ユニットテスト生成 (Vitest)
codegen -> codegen: TypeScriptビルド確認

codegen --> coordinator: AgentResult\n(status: success,\nfilesCreated: 3)
deactivate codegen

== Phase 4: コード品質レビュー ==

coordinator -> review: execute(Task-270-1)
activate review

review -> review: ESLint実行
review -> review: TypeScriptコンパイラ実行
review -> review: セキュリティスキャン
note right
  **検査内容**
  - Secret検出 (APIキー漏洩)
  - 脆弱性パターンマッチ
  - npm audit実行
end note

review -> review: 品質スコア算出
note right
  **スコアリング**
  base_score: 100点
  - ESLintエラー: -20点/件
  - TypeScriptエラー: -30点/件
  - Critical脆弱性: -40点/件
  合格ライン: 80点以上
end note

alt 品質スコア ≥ 80点
  review --> coordinator: AgentResult\n(status: success,\nqualityScore: 85)
  deactivate review
else 品質スコア < 80点
  review -> coordinator: AgentResult\n(status: failed,\nqualityScore: 75)
  coordinator -> codegen: 再実行 (品質改善)
  note right
    品質基準を満たすまでループ
    最大3回までリトライ
  end note
end

== Phase 5: Pull Request作成 ==

coordinator -> pr: execute(Task-270-1)
activate pr

pr -> pr: 現在ブランチ取得
pr -> pr: 変更サマリー取得\n(git diff --stat)

pr -> pr: PRタイトル生成\n(Conventional Commits準拠)
note right
  **タイトル形式**
  {prefix}({scope}): {description}

  例:
  feat(services): Add user authentication
  fix(api): Resolve invalid-credential error
end note

pr -> pr: PR説明文生成
note right
  **説明文構造**
  ## 概要
  ## 変更内容 (git diffから自動生成)
  ## テスト結果 (ReviewAgentから取得)
  ## チェックリスト
  ## 関連Issue: Closes #270
end note

pr -> github: Draft PR作成
github --> pr: PR #271作成完了

pr -> github: Label付与 + レビュワー割り当て
note right
  **Label:**
  - type:feature
  - priority:P1-High
  - agent:codegen

  **Reviewer:**
  - @tech-lead (CODEOWNERSから)
end note

github --> pr: 完了通知

pr --> coordinator: AgentResult\n(status: success,\nprNumber: 271)
deactivate pr

== Phase 6: 完了レポート ==

coordinator -> coordinator: ExecutionReport生成
note right
  **レポート内容**
  - sessionId
  - totalTasks: 3
  - completed: 3
  - failed: 0
  - successRate: 100%
  - totalDurationMs: 120,000
end note

coordinator -> github: 実行レポート保存
coordinator --> dev: ✅ Issue #270 completed\nPR #271 created (Draft)

deactivate coordinator

dev -> github: PR #271をレビュー
note right
  **人間レビュー**
  1. コード変更を確認
  2. テスト結果を確認
  3. 品質スコアを確認
  4. Draft → Ready for review
  5. Approve & Merge
end note

legend right
  |= Agent種別 |= 実行時間 |= 成功条件 |
  | CoordinatorAgent | 1-3分 | タスク分解成功率 100% |
  | IssueAgent | 5-10秒 | Label付与成功率 100% |
  | CodeGenAgent | 30-60秒 | TypeScriptエラー 0件 |
  | ReviewAgent | 15-30秒 | 品質スコア ≥80点 |
  | PRAgent | 10-20秒 | Draft PR作成成功率 100% |

  **組織設計原則:**
  責任と権限の明確化 - 各Agentの役割を明確に定義
  結果重視 - 品質スコアによる客観的判定
endlegend

@enduml
