@startuml worktree-workflow
!theme plain

title Worktree並列実行ワークフロー - Git Worktree + Claude Code統合

|CoordinatorAgent|
start

:npm run agents:parallel:exec\n--issues=270,271,272 --concurrency=3;

:Issue情報をGitHub APIから取得;
note right
  - Issue #270
  - Issue #271
  - Issue #272
end note

:タスク分解・DAG構築;
note right
  **DAG構築**
  Level 0: [task-270, task-271, task-272]
  → 3つのタスクは依存関係なし
  → 並行実行可能
end note

:並行度算出;
note right
  concurrency = min(
    独立タスク数: 3,
    指定値: 3,
    最大並行数: 5
  ) = 3
end note

|Main Directory|

:メインディレクトリで実行計画作成;

:ExecutionPlan保存\n(.ai/parallel-reports/);

fork
  |Worktree #1|
  :Worktree作成\n.worktrees/issue-270/;

  :ブランチ作成\nfeature/issue-270;

  :Claude Code起動\n(Worktree #1内);

  :プロンプト読み込み\n.claude/agents/prompts/codegen-agent-prompt.md;
  note right
    **テンプレート変数**
    WORKTREE_PATH: .worktrees/issue-270
    BRANCH_NAME: feature/issue-270
    TASK_ID: task-270
    ISSUE_NUMBER: 270
  end note

  :要件分析\n(5分);

  :コード実装\n(30-60分);
  note right
    **実装内容**
    - TypeScript strict mode
    - BaseAgentパターン
    - ユニットテスト (Vitest)
    - JSDocコメント
  end note

  :テスト実行\nnpm test;

  if (テスト成功?) then (yes)
    :Git commit;
    note right
      feat: implement task-270

      🤖 Generated with Claude Code
      Co-Authored-By: Claude <noreply@anthropic.com>
    end note
  else (no)
    :エラーログ記録;
    :Worktree保持\n(デバッグ用);
    stop
  endif

  :JSON出力生成;
  note right
    {
      "status": "success",
      "taskId": "task-270",
      "filesCreated": 3,
      "testResults": {
        "passed": 15,
        "failed": 0
      }
    }
  end note

fork again
  |Worktree #2|
  :Worktree作成\n.worktrees/issue-271/;

  :ブランチ作成\nfeature/issue-271;

  :Claude Code起動\n(Worktree #2内);

  :プロンプト読み込み\n.claude/agents/prompts/review-agent-prompt.md;

  :ESLint実行\n(5分);

  :TypeScript型チェック\n(5分);

  :セキュリティスキャン\n(5分);
  note right
    - Secret検出
    - 脆弱性パターンマッチ
    - npm audit
  end note

  :品質スコア算出;
  note right
    base_score: 100
    - ESLintエラー: -20点/件
    - TypeScriptエラー: -30点/件
    - Critical脆弱性: -40点/件
    合格ライン: 80点以上
  end note

  if (品質スコア ≥ 80点?) then (yes)
    :Git commit;
  else (no)
    :エスカレーション\n→ TechLead;
    stop
  endif

  :JSON出力生成;

fork again
  |Worktree #3|
  :Worktree作成\n.worktrees/issue-272/;

  :ブランチ作成\nfeature/issue-272;

  :Claude Code起動\n(Worktree #3内);

  :プロンプト読み込み\n.claude/agents/prompts/deployment-agent-prompt.md;

  :ビルド実行\nnpm run build\n(2分);

  if (ビルド成功?) then (yes)
    :テスト実行\nnpm test\n(3分);
  else (no)
    :エスカレーション\n→ TechLead;
    stop
  endif

  if (テスト成功?) then (yes)
    :Firebaseデプロイ\nfirebase deploy\n(5分);
  else (no)
    :エスカレーション\n→ TechLead;
    stop
  endif

  :ヘルスチェック\n(5回リトライ);

  if (ヘルスチェック成功?) then (yes)
    :Git commit;
  else (no)
    :自動Rollback実行;
    :エスカレーション\n→ CTO;
    stop
  endif

  :JSON出力生成;

end fork

|CoordinatorAgent|

:全Worktreeの結果を収集;

:成功したWorktreeをmainにマージ;
note right
  **マージ戦略**
  1. コンフリクトチェック
  2. 自動マージ (コンフリクトなし)
  3. 手動マージリクエスト (コンフリクトあり)
end note

:統合テスト実行;

if (統合テスト成功?) then (yes)
  :Worktree削除\ngit worktree remove;

  :ExecutionReport生成;
  note right
    {
      "sessionId": "session-1759552488828",
      "totalTasks": 3,
      "completed": 3,
      "failed": 0,
      "successRate": 100.0,
      "totalDurationMs": 120000
    }
  end note

  :レポート保存\n.ai/parallel-reports/;

else (no)
  :Worktree保持\n(デバッグ用);

  :エラーレポート生成;

  :失敗タスクのみ再実行;

endif

stop

legend right
  |= Worktree戦略 |= メリット |
  | 独立したディレクトリ | コンフリクト最小化 |
  | ブランチ完全分離 | 並列実行の真の実現 |
  | 簡単なロールバック | Worktree単位で破棄可能 |
  | デバッグが容易 | 各Worktreeで独立したログ |
  | スケーラビリティ | Worktree数に制限なし |

  **並行度の調整**
  - 低スペックマシン: concurrency=1
  - 通常マシン: concurrency=2-3
  - 高スペックマシン: concurrency=5

  **Worktree管理**
  git worktree list        # 一覧表示
  git worktree remove PATH # 削除
  git worktree prune       # クリーンアップ
endlegend

@enduml
