name: Webhook Agent Dispatch

# Listen to GitHub events and dispatch to appropriate agents
on:
  issues:
    types: [opened, labeled, closed]
  pull_request:
    types: [opened, synchronize, closed]
  issue_comment:
    types: [created]
  pull_request_review:
    types: [submitted]

jobs:
  route-event:
    runs-on: ubuntu-latest
    name: Route event to agent
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Dependencies
        run: npm ci

      - name: Route Event
        id: route
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          EVENT_NAME: ${{ github.event_name }}
          EVENT_ACTION: ${{ github.event.action }}
        run: |
          cat > route-event.ts << 'EOF'
          import { EventRouter } from './agents/orchestrator/event-router.js';

          async function main() {
            const eventName = process.env.EVENT_NAME!;
            const eventAction = process.env.EVENT_ACTION;

            // Read event payload from GitHub context
            const payload = JSON.parse(process.env.GITHUB_EVENT_PATH
              ? require('fs').readFileSync(process.env.GITHUB_EVENT_PATH, 'utf8')
              : '{}');

            console.log(`Processing ${eventName} event (action: ${eventAction})`);

            const router = new EventRouter();
            const tasks = await router.route({
              type: eventName as any,
              action: eventAction,
              payload,
            });

            console.log(`\nRouted to ${tasks.length} agent task(s):`);
            for (const task of tasks) {
              console.log(`  - ${task.agent}: ${task.taskType} (priority: ${task.priority})`);
            }

            // Output tasks as JSON for next step
            const tasksJson = JSON.stringify(tasks);
            console.log(`\n::set-output name=tasks::${tasksJson}`);

            // Write to file for artifact
            require('fs').writeFileSync('agent-tasks.json', tasksJson);
          }

          main().catch((error) => {
            console.error('Error routing event:', error);
            process.exit(1);
          });
          EOF

          npx tsx route-event.ts

      - name: Upload Agent Tasks
        uses: actions/upload-artifact@v4
        with:
          name: agent-tasks
          path: agent-tasks.json

      - name: Summary
        run: |
          echo "### ü§ñ Agent Dispatch" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Event**: ${{ github.event_name }} (${{ github.event.action }})" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ -f agent-tasks.json ]; then
            echo "**Routed Tasks**:" >> $GITHUB_STEP_SUMMARY
            echo '```json' >> $GITHUB_STEP_SUMMARY
            cat agent-tasks.json >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
          fi

  # Future: Execute agent tasks
  # This will be implemented when TaskToolWrapper is ready
  execute-tasks:
    needs: route-event
    runs-on: ubuntu-latest
    name: Execute agent tasks
    steps:
      - name: Download Agent Tasks
        uses: actions/download-artifact@v4
        with:
          name: agent-tasks

      - name: Placeholder
        run: |
          echo "‚è≠Ô∏è  Agent task execution will be implemented in parallel work system (Issue #6)"
          echo ""
          echo "Tasks to execute:"
          cat agent-tasks.json | jq '.'
