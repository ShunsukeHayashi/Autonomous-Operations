name: PR Comment Task Automation

on:
  issue_comment:
    types: [created]

permissions:
  issues: write
  pull-requests: write
  contents: read

jobs:
  parse-command:
    # Only run on PR comments (not regular issues)
    if: github.event.issue.pull_request && contains(github.event.comment.body, '@agentic-os')
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Parse command from comment
        id: parse
        uses: actions/github-script@v7
        with:
          script: |
            const comment = `${{ github.event.comment.body }}`;
            const prNumber = ${{ github.event.issue.number }};

            // Extract command after @agentic-os
            const match = comment.match(/@agentic-os\s+(.+)/);
            if (!match) {
              console.log('No command found after @agentic-os');
              return;
            }

            const command = match[1].trim();
            console.log(`Command: ${command}`);

            // Parse different command types
            let taskTitle = '';
            let taskBody = '';
            let labels = ['📊 priority:P2-Medium', '🎯 phase:planning'];

            if (command.toLowerCase().startsWith('fix')) {
              // @agentic-os fix the login bug
              taskTitle = command;
              taskBody = `Fix requested in PR #${prNumber}`;
              labels.push('🐛 type:bug', '💻 agent:codegen');
            } else if (command.toLowerCase().startsWith('test')) {
              // @agentic-os test this component
              taskTitle = command;
              taskBody = `Test requested in PR #${prNumber}`;
              labels.push('🧪 type:test', '👀 agent:review');
            } else if (command.toLowerCase().startsWith('document') || command.toLowerCase().startsWith('doc')) {
              // @agentic-os document this API
              taskTitle = command;
              taskBody = `Documentation requested in PR #${prNumber}`;
              labels.push('📚 type:docs', '💻 agent:codegen');
            } else if (command.toLowerCase().startsWith('refactor')) {
              // @agentic-os refactor this code
              taskTitle = command;
              taskBody = `Refactor requested in PR #${prNumber}`;
              labels.push('♻️ type:refactor', '💻 agent:codegen');
            } else if (command.toLowerCase().includes('coverage')) {
              // @agentic-os increase test coverage to 80%
              taskTitle = command;
              taskBody = `Test coverage improvement requested in PR #${prNumber}`;
              labels.push('🧪 type:test', '👀 agent:review');
            } else {
              // Generic task
              taskTitle = command;
              taskBody = `Task requested in PR #${prNumber}`;
              labels.push('✨ type:feature', '💻 agent:codegen');
            }

            // Create Issue
            const issue = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: taskTitle,
              body: `## Auto-generated from PR comment

**PR:** #${prNumber}
**Requested by:** @${{ github.event.comment.user.login }}
**Comment:** ${context.payload.comment.html_url}

### Task Description
${taskBody}

### Original Request
> ${command}

---
🤖 Auto-generated by Agentic OS`,
              labels
            });

            // Comment back on PR
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              body: `✅ Task created: #${issue.data.number}

The agents will start working on this automatically.

[View Issue #${issue.data.number}](${issue.data.html_url})`
            });

            console.log(`✅ Created Issue #${issue.data.number}`);
