{
  "phaseId": "phase-a",
  "phaseTitle": "Phase A: Data Persistence (Projects V2)",
  "priority": "Sev.1-Critical",
  "assignedAgent": "CodeGenAgent",
  "estimatedMinutes": 240,
  "guardianApprovalRequired": true,

  "subtasks": [
    {
      "id": "phase-a-1",
      "title": "Create GitHub Project V2 for Agent Task Board",
      "type": "setup",
      "estimatedMinutes": 30,
      "dependencies": [],
      "executionSteps": [
        {
          "step": 1,
          "action": "Navigate to GitHub repository Projects tab",
          "command": "gh project create 'Autonomous Operations - Agent Task Board' --owner @me --format json",
          "expectedOutput": "Project created with ID"
        },
        {
          "step": 2,
          "action": "Configure project views",
          "details": [
            "Board view: Group by Status (Todo, In Progress, Done)",
            "Table view: Show all custom fields",
            "Roadmap view: Timeline by Sprint"
          ]
        },
        {
          "step": 3,
          "action": "Get project number for automation",
          "command": "gh project list --owner @me --format json | jq '.projects[] | select(.title==\"Autonomous Operations - Agent Task Board\") | .number'",
          "expectedOutput": "Project number (e.g., 1)"
        }
      ],
      "acceptanceCriteria": [
        "Project visible at https://github.com/users/{owner}/projects/{number}",
        "Default Status field configured (Todo, In Progress, Done)",
        "Project number captured for next steps"
      ],
      "outputArtifacts": [
        "PROJECT_NUMBER environment variable",
        "PROJECT_ID for GraphQL queries"
      ]
    },
    {
      "id": "phase-a-2",
      "title": "Add custom fields to Project",
      "type": "configuration",
      "estimatedMinutes": 30,
      "dependencies": ["phase-a-1"],
      "executionSteps": [
        {
          "step": 1,
          "action": "Add 'Agent' field (Single Select)",
          "graphqlMutation": "mutation { addProjectV2Field(input: {projectId: $PROJECT_ID, dataType: SINGLE_SELECT, name: \"Agent\", options: [\"CoordinatorAgent\", \"CodeGenAgent\", \"ReviewAgent\", \"DeploymentAgent\", \"IssueAgent\", \"PRAgent\"]}) { projectV2Field { id } } }",
          "expectedOutput": "Field ID for Agent"
        },
        {
          "step": 2,
          "action": "Add 'Duration' field (Number)",
          "graphqlMutation": "mutation { addProjectV2Field(input: {projectId: $PROJECT_ID, dataType: NUMBER, name: \"Duration (minutes)\"}) { projectV2Field { id } } }",
          "expectedOutput": "Field ID for Duration"
        },
        {
          "step": 3,
          "action": "Add 'Cost' field (Number)",
          "graphqlMutation": "mutation { addProjectV2Field(input: {projectId: $PROJECT_ID, dataType: NUMBER, name: \"Cost (USD)\"}) { projectV2Field { id } } }",
          "expectedOutput": "Field ID for Cost"
        },
        {
          "step": 4,
          "action": "Add 'Quality Score' field (Number)",
          "graphqlMutation": "mutation { addProjectV2Field(input: {projectId: $PROJECT_ID, dataType: NUMBER, name: \"Quality Score (0-100)\"}) { projectV2Field { id } } }",
          "expectedOutput": "Field ID for Quality Score"
        },
        {
          "step": 5,
          "action": "Add 'Sprint' field (Iteration)",
          "graphqlMutation": "mutation { addProjectV2Field(input: {projectId: $PROJECT_ID, dataType: ITERATION, name: \"Sprint\", iterations: [{title: \"Sprint 1\", startDate: \"2025-10-08\", duration: 14}, {title: \"Sprint 2\", startDate: \"2025-10-22\", duration: 14}]}) { projectV2Field { id } } }",
          "expectedOutput": "Field ID for Sprint"
        }
      ],
      "acceptanceCriteria": [
        "All 5 custom fields visible in Project Table view",
        "Agent field has 6 options (all Agent types)",
        "Duration, Cost, Quality Score fields accept numeric input",
        "Sprint field shows current and next sprint"
      ],
      "outputArtifacts": [
        "FIELD_IDS.json with all custom field IDs",
        "GraphQL schema documentation for fields"
      ]
    },
    {
      "id": "phase-a-3",
      "title": "Create GitHub Action workflow for auto-add Issues to Project",
      "type": "automation",
      "estimatedMinutes": 45,
      "dependencies": ["phase-a-2"],
      "executionSteps": [
        {
          "step": 1,
          "action": "Create workflow file",
          "filePath": ".github/workflows/project-auto-add.yml",
          "content": "name: Auto-add Issues to Project\non:\n  issues:\n    types: [opened, reopened]\njobs:\n  add-to-project:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Add Issue to Project\n        uses: actions/add-to-project@v0.5.0\n        with:\n          project-url: https://github.com/users/${{ github.repository_owner }}/projects/$PROJECT_NUMBER\n          github-token: ${{ secrets.GITHUB_TOKEN }}"
        },
        {
          "step": 2,
          "action": "Test workflow by creating test Issue",
          "command": "gh issue create --title 'Test Issue for Project Auto-add' --body 'Testing Phase A workflow' --label 'test'",
          "expectedOutput": "Issue created and automatically added to Project"
        },
        {
          "step": 3,
          "action": "Verify Issue appears in Project Board",
          "command": "gh project item-list $PROJECT_NUMBER --owner @me --format json | jq '.items[] | select(.content.title==\"Test Issue for Project Auto-add\")'",
          "expectedOutput": "Item found in Project with Status=Todo"
        },
        {
          "step": 4,
          "action": "Close test Issue",
          "command": "gh issue close <test-issue-number> --reason 'completed'",
          "expectedOutput": "Test Issue closed"
        }
      ],
      "acceptanceCriteria": [
        "Workflow triggers on issue opened/reopened events",
        "New Issues automatically added to Project with Status=Todo",
        "Workflow run completes successfully (green check)",
        "No manual intervention required"
      ],
      "outputArtifacts": [
        ".github/workflows/project-auto-add.yml",
        "Workflow test results"
      ]
    },
    {
      "id": "phase-a-4",
      "title": "Create workflow to update Project status based on PR state",
      "type": "automation",
      "estimatedMinutes": 60,
      "dependencies": ["phase-a-3"],
      "executionSteps": [
        {
          "step": 1,
          "action": "Create PR status sync workflow",
          "filePath": ".github/workflows/project-pr-sync.yml",
          "content": "name: Sync PR status to Project\non:\n  pull_request:\n    types: [opened, closed, reopened]\njobs:\n  update-project:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Update Project Status\n        uses: actions/github-script@v7\n        with:\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n          script: |\n            const prNumber = context.payload.pull_request.number;\n            const prState = context.payload.pull_request.state;\n            const prMerged = context.payload.pull_request.merged;\n            \n            // Get linked Issue from PR body\n            const prBody = context.payload.pull_request.body || '';\n            const issueMatch = prBody.match(/(?:Closes|Fixes|Resolves) #(\\d+)/i);\n            \n            if (issueMatch) {\n              const issueNumber = issueMatch[1];\n              // GraphQL query to update Project item status\n              const query = `\n                mutation {\n                  updateProjectV2ItemFieldValue(\n                    input: {\n                      projectId: \"$PROJECT_ID\"\n                      itemId: \"$ITEM_ID\"\n                      fieldId: \"$STATUS_FIELD_ID\"\n                      value: { singleSelectOptionId: \"${prMerged ? 'DONE_OPTION_ID' : 'IN_PROGRESS_OPTION_ID'}\" }\n                    }\n                  ) {\n                    projectV2Item { id }\n                  }\n                }\n              `;\n              // Execute GraphQL mutation\n            }"
        },
        {
          "step": 2,
          "action": "Add GraphQL helper script",
          "filePath": ".github/scripts/update-project-status.js",
          "content": "// Node.js script to update Project item status via GraphQL\nconst { graphql } = require('@octokit/graphql');\n\nasync function updateProjectStatus(issueNumber, status) {\n  const graphqlWithAuth = graphql.defaults({\n    headers: { authorization: `token ${process.env.GITHUB_TOKEN}` }\n  });\n  \n  // Query to get Project item ID from Issue number\n  const itemQuery = `query { ... }`;\n  // Mutation to update status field\n  const updateMutation = `mutation { ... }`;\n  \n  const result = await graphqlWithAuth(updateMutation, { ... });\n  console.log('Project status updated:', result);\n}\n\nmodule.exports = { updateProjectStatus };"
        },
        {
          "step": 3,
          "action": "Test PR status sync",
          "details": [
            "Create test Issue #101",
            "Create PR that closes #101",
            "Verify Project status changes to 'In Progress'",
            "Merge PR",
            "Verify Project status changes to 'Done'"
          ]
        }
      ],
      "acceptanceCriteria": [
        "PR opened → Project status changes to 'In Progress'",
        "PR merged → Project status changes to 'Done'",
        "PR closed (not merged) → Project status remains unchanged",
        "Workflow handles missing Issue links gracefully"
      ],
      "outputArtifacts": [
        ".github/workflows/project-pr-sync.yml",
        ".github/scripts/update-project-status.js",
        "GraphQL query documentation"
      ]
    },
    {
      "id": "phase-a-5",
      "title": "Build GraphQL queries for Project data retrieval",
      "type": "implementation",
      "estimatedMinutes": 45,
      "dependencies": ["phase-a-4"],
      "executionSteps": [
        {
          "step": 1,
          "action": "Create GraphQL query library",
          "filePath": "agents/sdk/github-projects-queries.ts",
          "content": "import { graphql } from '@octokit/graphql';\n\nexport const projectQueries = {\n  // Get all Project items with custom fields\n  getAllItems: `\n    query($projectNumber: Int!, $owner: String!) {\n      user(login: $owner) {\n        projectV2(number: $projectNumber) {\n          items(first: 100) {\n            nodes {\n              id\n              content {\n                ... on Issue {\n                  number\n                  title\n                  state\n                  createdAt\n                  closedAt\n                }\n              }\n              fieldValues(first: 20) {\n                nodes {\n                  ... on ProjectV2ItemFieldSingleSelectValue {\n                    name\n                    field { ... on ProjectV2FieldCommon { name } }\n                  }\n                  ... on ProjectV2ItemFieldNumberValue {\n                    number\n                    field { ... on ProjectV2FieldCommon { name } }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  `,\n  \n  // Get Project statistics\n  getProjectStats: `\n    query($projectNumber: Int!, $owner: String!) {\n      user(login: $owner) {\n        projectV2(number: $projectNumber) {\n          items(first: 100) {\n            totalCount\n            nodes {\n              fieldValues(first: 20) {\n                nodes {\n                  ... on ProjectV2ItemFieldSingleSelectValue {\n                    name\n                    field { ... on ProjectV2FieldCommon { name } }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  `\n};"
        },
        {
          "step": 2,
          "action": "Create TypeScript types for Project data",
          "filePath": "agents/sdk/github-projects-types.ts",
          "content": "export interface ProjectItem {\n  id: string;\n  issueNumber: number;\n  title: string;\n  state: 'OPEN' | 'CLOSED';\n  status: 'Todo' | 'In Progress' | 'Done';\n  agent: string | null;\n  durationMinutes: number | null;\n  costUSD: number | null;\n  qualityScore: number | null;\n  sprint: string | null;\n  createdAt: string;\n  closedAt: string | null;\n}\n\nexport interface ProjectStats {\n  totalItems: number;\n  todoCount: number;\n  inProgressCount: number;\n  doneCount: number;\n  avgDuration: number;\n  totalCost: number;\n  avgQualityScore: number;\n}"
        },
        {
          "step": 3,
          "action": "Create query executor with error handling",
          "filePath": "agents/sdk/github-projects-client.ts",
          "content": "import { graphql } from '@octokit/graphql';\nimport { projectQueries } from './github-projects-queries';\nimport { ProjectItem, ProjectStats } from './github-projects-types';\n\nexport class GitHubProjectsClient {\n  private graphqlWithAuth: typeof graphql;\n  \n  constructor(token: string) {\n    this.graphqlWithAuth = graphql.defaults({\n      headers: { authorization: `token ${token}` }\n    });\n  }\n  \n  async getAllItems(projectNumber: number, owner: string): Promise<ProjectItem[]> {\n    try {\n      const result = await this.graphqlWithAuth(projectQueries.getAllItems, {\n        projectNumber,\n        owner\n      });\n      return this.parseProjectItems(result);\n    } catch (error) {\n      console.error('Failed to fetch Project items:', error);\n      throw error;\n    }\n  }\n  \n  async getProjectStats(projectNumber: number, owner: string): Promise<ProjectStats> {\n    const items = await this.getAllItems(projectNumber, owner);\n    return this.calculateStats(items);\n  }\n  \n  private parseProjectItems(data: any): ProjectItem[] {\n    // Parse GraphQL response into ProjectItem[]\n  }\n  \n  private calculateStats(items: ProjectItem[]): ProjectStats {\n    // Calculate aggregate statistics\n  }\n}"
        },
        {
          "step": 4,
          "action": "Test GraphQL queries",
          "command": "npm run test:integration -- --grep 'GitHubProjectsClient'",
          "expectedOutput": "All query tests pass"
        }
      ],
      "acceptanceCriteria": [
        "GraphQL queries successfully fetch all Project items",
        "Custom fields (Agent, Duration, Cost, Quality Score) retrieved correctly",
        "TypeScript types ensure type safety",
        "Error handling for rate limits and API failures",
        "Integration tests pass"
      ],
      "outputArtifacts": [
        "agents/sdk/github-projects-queries.ts",
        "agents/sdk/github-projects-types.ts",
        "agents/sdk/github-projects-client.ts",
        "Integration test suite"
      ]
    },
    {
      "id": "phase-a-6",
      "title": "Generate weekly reports from Project data",
      "type": "automation",
      "estimatedMinutes": 30,
      "dependencies": ["phase-a-5"],
      "executionSteps": [
        {
          "step": 1,
          "action": "Create weekly report generation script",
          "filePath": "scripts/generate-weekly-report.ts",
          "content": "import { GitHubProjectsClient } from '../agents/sdk/github-projects-client';\nimport { ProjectStats } from '../agents/sdk/github-projects-types';\nimport * as fs from 'fs';\n\nasync function generateWeeklyReport() {\n  const client = new GitHubProjectsClient(process.env.GITHUB_TOKEN!);\n  const projectNumber = parseInt(process.env.PROJECT_NUMBER!, 10);\n  const owner = process.env.GITHUB_REPOSITORY_OWNER!;\n  \n  const stats = await client.getProjectStats(projectNumber, owner);\n  const items = await client.getAllItems(projectNumber, owner);\n  \n  const report = `\n# Weekly Agent Report - ${new Date().toISOString().split('T')[0]}\n\n## Summary\n- Total Items: ${stats.totalItems}\n- Completed: ${stats.doneCount} (${((stats.doneCount/stats.totalItems)*100).toFixed(1)}%)\n- In Progress: ${stats.inProgressCount}\n- Todo: ${stats.todoCount}\n\n## Performance Metrics\n- Average Duration: ${stats.avgDuration.toFixed(1)} minutes\n- Total Cost: $${stats.totalCost.toFixed(2)}\n- Average Quality Score: ${stats.avgQualityScore.toFixed(1)}/100\n\n## Completed This Week\n${items.filter(i => i.status === 'Done' && isThisWeek(i.closedAt)).map(i => `- #${i.issueNumber}: ${i.title}`).join('\\n')}\n\n## In Progress\n${items.filter(i => i.status === 'In Progress').map(i => `- #${i.issueNumber}: ${i.title} (${i.agent})`).join('\\n')}\n  `;\n  \n  fs.writeFileSync('.ai/weekly-report.md', report);\n  console.log('Weekly report generated: .ai/weekly-report.md');\n}\n\nfunction isThisWeek(dateStr: string | null): boolean {\n  if (!dateStr) return false;\n  const date = new Date(dateStr);\n  const now = new Date();\n  const weekAgo = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);\n  return date >= weekAgo && date <= now;\n}\n\ngenerateWeeklyReport();"
        },
        {
          "step": 2,
          "action": "Create scheduled workflow for weekly reports",
          "filePath": ".github/workflows/weekly-report.yml",
          "content": "name: Generate Weekly Report\non:\n  schedule:\n    - cron: '0 9 * * MON'  # Every Monday at 9am UTC\n  workflow_dispatch:  # Allow manual trigger\njobs:\n  generate-report:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n      - uses: actions/setup-node@v4\n        with:\n          node-version: '20'\n      - run: npm ci\n      - run: npm run report:weekly\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          PROJECT_NUMBER: ${{ vars.PROJECT_NUMBER }}\n      - name: Commit report\n        run: |\n          git config user.name 'github-actions[bot]'\n          git config user.email 'github-actions[bot]@users.noreply.github.com'\n          git add .ai/weekly-report.md\n          git commit -m 'chore: weekly agent report'\n          git push"
        },
        {
          "step": 3,
          "action": "Add npm script for report generation",
          "filePath": "package.json",
          "jsonPatch": "{\n  \"scripts\": {\n    \"report:weekly\": \"tsx scripts/generate-weekly-report.ts\"\n  }\n}"
        },
        {
          "step": 4,
          "action": "Test report generation manually",
          "command": "npm run report:weekly",
          "expectedOutput": "Weekly report generated successfully in .ai/weekly-report.md"
        }
      ],
      "acceptanceCriteria": [
        "Weekly report generates automatically every Monday",
        "Report includes summary statistics (total, completed, in progress)",
        "Performance metrics calculated correctly (duration, cost, quality)",
        "Report committed to repository automatically",
        "Manual trigger via workflow_dispatch works"
      ],
      "outputArtifacts": [
        "scripts/generate-weekly-report.ts",
        ".github/workflows/weekly-report.yml",
        ".ai/weekly-report.md (sample)",
        "package.json update"
      ]
    }
  ],

  "executionOrder": [
    "phase-a-1",
    "phase-a-2",
    "phase-a-3",
    "phase-a-4",
    "phase-a-5",
    "phase-a-6"
  ],

  "guardianCheckpoints": [
    {
      "checkpoint": "After phase-a-2",
      "reason": "Verify custom fields are correctly configured before automation",
      "verificationSteps": [
        "Open Project in browser",
        "Check all 5 custom fields are visible",
        "Test adding values to each field manually",
        "Confirm field IDs captured in FIELD_IDS.json"
      ]
    },
    {
      "checkpoint": "After phase-a-4",
      "reason": "Verify PR status sync before building queries",
      "verificationSteps": [
        "Create test Issue and PR",
        "Verify status changes to 'In Progress' when PR opened",
        "Merge PR and verify status changes to 'Done'",
        "Check workflow logs for errors"
      ]
    },
    {
      "checkpoint": "After phase-a-6 (Final)",
      "reason": "Complete Phase A validation before moving to Phase B",
      "verificationSteps": [
        "All 6 subtasks completed",
        "Project auto-add workflow operational",
        "PR status sync functional",
        "GraphQL queries tested and working",
        "Weekly report generated successfully",
        "Documentation updated"
      ]
    }
  ],

  "completionCriteria": {
    "technical": [
      "GitHub Project V2 created with custom fields",
      "Auto-add workflow triggers on Issue creation",
      "PR status sync updates Project automatically",
      "GraphQL queries retrieve all Project data",
      "Weekly report generation automated",
      "All integration tests pass"
    ],
    "documentation": [
      "FIELD_IDS.json created with all field IDs",
      "GraphQL query documentation written",
      "Weekly report sample generated",
      "README updated with Phase A instructions"
    ],
    "validation": [
      "Manual testing of all workflows completed",
      "Guardian approval checkpoint passed",
      "No errors in workflow runs",
      "Performance metrics within expected ranges"
    ]
  },

  "nextPhase": {
    "phaseId": "phase-b",
    "phaseTitle": "Phase B: Event Bus (Webhooks)",
    "startCondition": "Phase A completed + Guardian approval",
    "blockingIssues": "None (Phase A is independent)",
    "estimatedStartDate": "2025-10-08T04:00:00.000Z"
  }
}
